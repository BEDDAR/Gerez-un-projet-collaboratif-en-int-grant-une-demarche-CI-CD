name: CI/CD Pipeline

on:
  push:
    branches: [main, workflows]
  pull_request:
    branches: [main, workflows]

permissions:
  pull-requests: write
  contents: read

env:
  DOCKER_IMAGE_BACK: bobapp-back
  DOCKER_IMAGE_FRONT: bobapp-front

jobs:
  # BACKEND: Build & Test
  build-test-backend:
    name: Build & Test Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./back

    steps:
      - uses: actions/checkout@v4 #récupérer le code de mon dépôt

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean install

      - name: Run tests and generate coverage
        run: mvn test jacoco:report

      - name: Upload JaCoCo Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: back/target/site/jacoco  

  # FRONTEND: Build & Test
  build-test-frontend:
    name: Build & Test Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./front

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Install Chrome
        uses: browser-actions/setup-chrome@v1

      - name: Set CHROME_BIN env variable
        run: echo "CHROME_BIN=$(which google-chrome)" >> $GITHUB_ENV

      - name: Run frontend tests with coverage
        run: npx ng test --browsers=ChromeHeadless --watch=false --code-coverage

      - name: List contents of coverage directory
        run: ls -la coverage


      - name: Upload Frontend Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: ./front/coverage/bobapp


  # SONAR BACKEND
  sonar-back:
    name: SonarCloud Backend Analysis
    needs: [build-test-backend]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./back

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build backend (skip tests)
        run: mvn clean install -DskipTests

      - name: Run SonarCloud analysis (Back)
        uses: sonarsource/sonarqube-scan-action@v5
        with:
          projectBaseDir: ./back
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # SONAR FRONTEND
  sonar-front:
    name: SonarCloud Frontend Analysis
    needs: [build-test-frontend]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./front

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install frontend dependencies
        run: npm install

      - name: Build frontend
        run: npm run build

      - name: Set SONAR_TOKEN env
        run: echo "SONAR_TOKEN=${{ secrets.SONAR_TOKEN_FRONT }}" >> $GITHUB_ENV

      - name: Run SonarCloud analysis (Front)
        uses: sonarsource/sonarqube-scan-action@v5
        with:
          projectBaseDir: ./front
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FRONT}}

  # BUILD & PUSH DOCKER
  docker-build-push:
    name: Build & Push Docker Images
    needs: [sonar-back, sonar-front]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push backend image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_BACK }} ./back
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_BACK }}

      - name: Build and push frontend image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_FRONT }} ./front
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_FRONT }}
